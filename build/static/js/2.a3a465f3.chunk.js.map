{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","formStateData","omit","isEmptyObject","find","useSubscribe","props","_props","subscription","disabled","subject","subscribe","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","isBlurEvent","has","watchName","startsWith","slice","cloneObject","Set","createSubject","_observers","observers","observer","push","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","isValid","validResult","options","values","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","join","foundError","pop","isTouched","isSubmitted","reValidateMode","RegExp","getValidateError","validationData","isRegex","inputValue","a","inputRef","setCustomValidity","reportValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","onChange","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","control","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"mappings":"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","file":"static/js/2.a3a465f3.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}