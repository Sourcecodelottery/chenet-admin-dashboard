{"version":3,"sources":["content/pages/Status/Login/index.tsx"],"names":["type","MainContent","styled","Box","UserAuth","useState","useForm","register","handleSubmit","formState","errors","className"],"mappings":"+JA6CKA,E,0EA3BCC,EAAcC,YAAOC,IAAPD,EAClB,yL,SA0BGF,K,oCAAAA,E,kCAAAA,E,iCAAAA,M,KAyIUI,UAlIf,WACE,MAA8BC,oBAAS,GAAvC,mBACA,GADA,UACkCA,oBAAS,IAA3C,mBACA,GADA,UAC4CA,mBAAS,OAArD,mBACA,GADA,UACkCA,oBAAS,IAA3C,mBAgCA,GAhCA,UAoCIC,eAEJ,GANA,EACEC,SADF,EAEEC,aAFF,EAGEC,UAAaC,OAOXJ,eAmEJ,OAvEA,EACEC,SADF,EAEEC,aAFF,EAGEC,UAAaC,OAqEb,qCACE,cAAC,IAAD,UACE,qDAEF,cAACT,EAAD,UAEE,qBAAKU,UAAU","file":"static/js/59.5e2513bb.chunk.js","sourcesContent":["import { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Hidden,\n  Container,\n  Button,\n  CircularProgress,\n  Grid\n} from '@mui/material';\nimport { Helmet } from 'react-helmet-async';\nimport { FieldError, useForm } from \"react-hook-form\"\nimport \"./styles.css\"\nimport { styled } from '@mui/material/styles';\n// import { SignUpUser, LoginUser } from 'src/store/States/Auth/actions';\nimport { IUserInput, ILoginInput } from 'src/store/States/Auth/user.types';\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nconst MainContent = styled(Box)(\n  () => `\n    height: 100%;\n    display: flex;\n    flex: 1;\n    overflow: auto;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`\n);\n\ntype RegisterInputs = {\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone_number: string;\n  password: string;\n  role: string;\n}\n\ntype LoginInputs = {\n  email: string;\n  password: string;\n}\n\n// const for response types\nenum type {\n  \"ValidationErrors\" = \"ValidationErrors\",\n  \"ValidationError\" = \"ValidationError\",\n  \"IAccountSimple\" = \"IAccountSimple\",\n};\n\n\nfunction UserAuth() {\n  const [isLogin, setIsLogin] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  let [validationError, setValidationError] = useState(null);\n  let [isLoggedIn, setIsLoggedIn] = useState(false);\n  const signUpUser = (input: IUserInput) => {\n    setIsLoading(true)\n    // SignUpUser(input, (err: any, data: any) => {\n    //   console.log(\"here\", data)\n    //   setIsLoading(false)\n    // })\n  }\n  // let navigate = useNavigate();\n\n  // const loginUser = (input: ILoginInput) => {\n  //   setIsLoading(true)\n  //   LoginUser(input, (err: any, data: any) => {\n  //     switch (data.__typename) {\n  //       case type.ValidationError:\n  //         setValidationError(data.errors[0].error_message);\n  //         setIsLoading(false);\n  //         break;\n  //       case type.ValidationErrors:\n  //         console.log(data)\n  //         setIsLoading(false);\n  //         break;\n  //       case type.IAccountSimple:\n  //         console.log(\"successfully logged in\")\n  //         console.log(data)\n  //         setIsLoading(false)\n  //         window.location.href = \"/Category\"\n  //     }\n  //   })\n  // }\n\n\n  const {\n    register: registerSignup,\n    handleSubmit: handleRegisterSubmit,\n    formState: { errors: signupErrors },\n  } = useForm<RegisterInputs>();\n\n  const {\n    register: registerLogin,\n    handleSubmit: handleLoginSubmit,\n    formState: { errors: loginErrors },\n  } = useForm<LoginInputs>();\n\n  const errMessage = (labelText: string) => {\n    return <label style={{ color: \"red\" }}>{labelText}</label>\n  }\n\n  // const LoginForm = () => <form onSubmit={handleLoginSubmit(loginUser)}>\n  //   <h1>Login</h1>\n  //   <span style={{ display: validationError ? \" block ruby\" : \"none\", padding: 0 }} className=\"content\">{validationError ? validationError : null}</span>\n  //   <div className=\"content\">\n  //     <div className=\"input-field\">\n  //       <input type=\"email\" placeholder=\"Email\" autoComplete=\"nope\" {...registerLogin(\"email\", { required: \"This is a required field\" })} />\n  //       {loginErrors.email ? errMessage(loginErrors.email.message) : null}\n  //     </div>\n  //     <div className=\"input-field\">\n  //       <input type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" {...registerLogin(\"password\", { required: \"This is a required field\" })} />\n  //       {loginErrors.password ? errMessage(loginErrors.password.message) : null}\n  //     </div>\n  //     <a href=\"#\" className=\"link\" onClick={() => setIsLogin(false)}>Don't have an account?</a>\n  //   </div>\n  //   <div className=\"action\">\n  //     <button style={{ display: \"none\" }}></button>\n  //     <button type=\"submit\" onClick={() => setIsLogin(false)}>\n  //       {isLoading ? <CircularProgress /> : \"Login\"}\n  //     </button>\n  //   </div>\n  // </form>\n\n  const SignUpForm = () => <form onSubmit={handleRegisterSubmit(signUpUser)}>\n    <h1>Signup</h1>\n    <div className=\"content\">\n      <div className=\"input-field\">\n        <input type=\"text\" placeholder=\"First Name\" autoComplete=\"nope\" {...registerSignup(\"first_name\", { required: \"This is a required field\" })} />\n        {signupErrors.first_name ? errMessage(signupErrors.first_name.message) : null}\n      </div>\n      <div className=\"input-field\">\n        <input type=\"text\" placeholder=\"Last Name\" autoComplete=\"nope\" {...registerSignup(\"last_name\", { required: \"This is a required field\" })} />\n        {signupErrors.last_name ? errMessage(signupErrors.last_name.message) : null}\n      </div>\n      <div className=\"input-field\">\n        <input type=\"text\" placeholder=\"Phone Number\" autoComplete=\"nope\" {...registerSignup(\"phone_number\", { required: \"This is a required field\" })} />\n        {signupErrors.phone_number ? errMessage(signupErrors.phone_number.message) : null}\n      </div>\n      <div className=\"input-field\">\n        <select className=\"input-field\" {...registerSignup(\"role\", { required: \"This is a required field\" })}>\n          <option value=\"ADMIN\">Admin</option>\n        </select>\n        {signupErrors.role ? errMessage(signupErrors.role.message) : null}\n      </div>\n      <div className=\"input-field\">\n        <input type=\"email\" placeholder=\"Email\" autoComplete=\"nope\" {...registerSignup(\"email\", { required: \"This is a required field\" })} />\n        {signupErrors.email ? errMessage(signupErrors.email.message) : null}\n      </div>\n      <div className=\"input-field\">\n        <input type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" {...registerSignup(\"password\", { required: \"This is a required field\" })} />\n        {signupErrors.password ? errMessage(signupErrors.password.message) : null}\n      </div>\n      <a href=\"#\" className=\"link\" onClick={() => setIsLogin(true)}>Already have an account?</a>\n    </div>\n    <div className=\"action\">\n      <button style={{ display: \"none\" }}></button>\n      <button type=\"submit\" onClick={() => setIsLogin(false)}>\n        {isLoading ? <CircularProgress /> : \"Register\"}\n      </button>\n    </div>\n  </form>\n\n  return (\n    <>\n      <Helmet>\n        <title>User Auth Form</title>\n      </Helmet>\n      <MainContent>\n\n        <div className=\"login-form\">\n          {/* {isLogin ? LoginForm() : SignUpForm()} */\n            // LoginForm()\n          }\n        </div>\n      </MainContent>\n    </>\n  );\n}\n\nexport default UserAuth;"],"sourceRoot":""}