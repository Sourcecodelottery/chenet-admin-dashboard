{"version":3,"sources":["components/Footer/index.tsx","../node_modules/@mui/icons-material/UploadTwoTone.js","../node_modules/form-data/lib/browser.js","store/States/Notification/queries.ts","store/States/Notification/actions.ts","store/States/User/action.ts","store/States/User/query.ts","pages/Notification/CreateNotification/index.tsx"],"names":["FooterWrapper","styled","Box","theme","spacing","Footer","maxWidth","py","display","xs","md","alignItems","textAlign","justifyContent","variant","sx","pt","href","target","rel","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","opacity","module","self","FormData","window","AddNotificationBody","input","query","content","title","description","images","map","item","targeted_users","removeNotificationBody","_id","createNotification","callback","err","data","Axios","post","endPoints","baseURL","then","res","catch","console","log","removeOneNotification","FetchNotificationsDoc","headers","fetchAllUsersSimple","CreateNotification","_props","navigate","useNavigate","useState","users","setUsers","isLoading","setIsLoading","setTitle","setDescription","targetedUsers","setImages","titleError","descriptionError","reset","useEffect","_error","selectAll","selectedUsers","setSelectedUsers","gender","setGender","userOptions","isFiltered","filter","user","label","first_name","last_name","animatedComponents","makeAnimated","createNotificationHandler","a","Input","Card","useForm","registerCreateNotification","register","handleCreateNotificationSubmit","handleSubmit","createNotificationErrors","formState","errors","useTheme","mx","container","direction","onSubmit","width","mt","error","undefined","required","type","onChange","e","helperText","_e","multiline","rows","closeMenuOnSelect","components","options","isMulti","component","row","name","control","marginTop","files","currentTarget","accept","id","multiple","htmlFor","startIcon","px","color","onClick","_formData","i","length","image","append","reqOptions","url","uploadURL","method","request","_response","uri","String","_err","routes","ADMIN","NOTIFICATION","ROUTE","replace","createNotificationHandle","style"],"mappings":"yHAAA,sDAGMA,EAAgBC,YAAOC,IAAPD,EACpB,gBAAGE,EAAH,EAAGA,MAAH,6DAEgBA,EAAMC,QAAQ,GAF9B,YA+BaC,IAzBf,WACE,OACE,cAACL,EAAD,UACE,cAAC,IAAD,CAAWM,SAAS,KAApB,SACE,eAAC,IAAD,CACEC,GAAI,EACJC,QAAS,CAAEC,GAAI,QAASC,GAAI,QAC5BC,WAAW,SACXC,UAAW,CAAEH,GAAI,SAAUC,GAAI,QAC/BG,eAAe,gBALjB,UAOE,cAAC,IAAD,UACE,cAAC,IAAD,CAAYC,QAAQ,YAApB,kEAIF,eAAC,IAAD,CAAYC,GAAI,CAAEC,GAAI,CAAEP,GAAI,EAAGC,GAAI,IAAOI,QAAQ,YAAlD,wBACa,cAAC,IAAD,CAAMG,KAAK,sBAAsBC,OAAO,SAASC,IAAI,sBAArD,qC,iCCzBvB,IAAIC,EAAyBC,EAAQ,IAErCC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAAiBP,EAAuBC,EAAQ,KAEhDO,EAAcP,EAAQ,GAEtBQ,GAAW,EAAIF,EAAeD,SAAS,EAAc,EAAIE,EAAYE,KAAK,OAAQ,CACpFC,EAAG,iCACHC,QAAS,MACR,MAAmB,EAAIJ,EAAYE,KAAK,OAAQ,CACjDC,EAAG,+EACF,MAAO,iBAEVP,EAAQE,QAAUG,G,kBCnBlBI,EAAOT,QAAyB,iBAARU,KAAmBA,KAAKC,SAAWC,OAAOD,U,oKCKrDE,EAAsB,SAACC,GAAD,MAAgC,CACjEC,MAAM,kFAAD,OAGWD,EAAME,QAAQC,MAHzB,oCAIiBH,EAAME,QAAQE,YAJ/B,+BAKYJ,EAAME,QAAQG,OAAOC,KAAI,SAAAC,GAAI,iBAAQA,EAAR,QALzC,8CAOkBP,EAAMQ,eAAeF,KAAI,SAAAC,GAAI,iBAAQA,EAAR,QAP/C,iOAgFME,EAAyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,MAAwB,CAC5DT,MAAM,gDAAD,OAC4BS,EAD5B,qSCjFMC,EAAqB,SAACX,GAAyE,IAA9CY,EAA6C,uDAAlC,SAACC,EAAUC,GAAX,OAAyB,MAChGC,IAAMC,KAAKC,IAAUC,QAASnB,EAAoBC,IAC/CmB,MAAK,SAAAC,GACJR,EAAS,KAAMQ,EAAIN,KAAKA,KAAT,uBAEhBO,OAAM,SAAAR,GAAG,OAAIS,QAAQC,IAAI,QAASV,OAqC1BW,EAAyB,SAAC,GAAiE,IAA/Dd,EAA8D,EAA9DA,IAAiBE,EAA6C,uDAAlC,SAACC,EAAUC,GAAX,OAAyB,MAC5FC,IAAMC,KAAKC,IAAUC,QAAST,EAAuB,CAAEC,SACpDS,MAAK,SAAAC,GACJR,EAAS,KAAMQ,EAAIN,KAAKA,KAAT,2BAEhBO,OAAM,SAAAR,GAAG,OAAIS,QAAQC,IAAI,QAASV,OAc1BY,EAAwB,WAAwD,IAAvDb,EAAsD,uDAA3C,SAACC,EAAUC,EAAWY,GAAtB,OAAkC,MACjFX,IAAMC,KAAKC,IAAUC,QDqDyB,CAC9CjB,MAAM,qMCrDHkB,MAAK,SAACC,GACLE,QAAQC,IAAIH,EAAIN,KAAKA,MACrBF,EAAS,KAAMQ,EAAIN,KAAKA,KAAT,sBAAwCM,MAExDC,OAAM,SAAAR,GAAG,OAAIS,QAAQC,IAAI,QAASV,Q,gGCrE1Bc,EAAsB,WAA+C,IAA9Cf,EAA6C,uDAAlC,SAACC,EAAUC,GAAX,OAAyB,MACtEC,IAAMC,KAAKC,IAAUC,QCHc,CACnCjB,MAAM,wNDGHkB,MAAK,SAAAC,GACJE,QAAQC,IAAI,OAAQH,EAAIN,KAAKA,KAAT,YACpBF,EAAS,KAAMQ,EAAIN,KAAKA,KAAT,eAEhBO,OAAM,SAAAR,GAAG,OAAIS,QAAQC,IAAI,QAASV,Q,qZEsBhC,SAASe,EAAmBC,GACjC,IAAMC,EAAWC,cAEjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBACA,GADA,UACkCA,oBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,EAA0BJ,mBAAS,MAAnC,mBAAO7B,EAAP,KAAckC,EAAd,KACA,EAAsCL,mBAAS,IAA/C,mBAAO5B,EAAP,KAAoBkC,EAApB,KACA,EAAyCN,mBAAS,IAAlD,mBAAOO,GAAP,KACA,IADA,KAC4BP,mBAAS,KAArC,qBAAO3B,GAAP,MAAemC,GAAf,MAEA,GAAoCR,mBAAS,MAA7C,qBAAOS,GAAP,MACA,IADA,MACgDT,mBAAS,OAAzD,qBAAOU,GAAP,MACA,IADA,MACmDV,mBAAS,OAA5D,qBACA,IADA,YAC0BA,oBAAS,IAAnC,qBAAOW,GAAP,YAEAC,qBAAU,WACRjB,aAAoB,SAACkB,EAAQ/B,GAC3BoB,EAASpB,QAEV,IAEH,OAAkCkB,oBAAS,GAA3C,qBAAOc,GAAP,MACA,IADA,MAC0Cd,mBAAS,KAAnD,qBAAOe,GAAP,MAAsBC,GAAtB,MACA,GAA4BhB,mBAAS,MAArC,qBAAOiB,GAAP,MAAeC,GAAf,MAEAN,qBAAU,WACR,IAAI9B,EAAOqC,GACPC,GAAsB,EACtBT,KACF7B,EAAO,GACPsC,GAAa,GAEXN,KACFE,GAAiBlC,GACjBsC,GAAa,GAEA,SAAXH,IACFnC,EAAOA,EAAKuC,QAAO,SAAAC,GAAI,MAAoB,SAAhBA,EAAKL,UAChCG,GAAa,GACO,WAAXH,KACTnC,EAAOA,EAAKuC,QAAO,SAAAC,GAAI,MAAoB,WAAhBA,EAAKL,UAChCG,GAAa,GAGXA,GACFJ,GAAiBlC,KAElB,CAACmC,GAAQH,GAAWH,KAQvB,IAAMQ,GAA6BlB,EAAM3B,KAAI,SAAAgD,GAAI,MAChD,CACCnE,MAAOmE,EAAK5C,IACZ6C,MAAOD,EAAKE,WAAa,IAAMF,EAAKG,UACpCR,OAAwB,OAAhBK,EAAKL,OAAkBK,EAAKL,OAAS,SAGzCS,GAAqBC,cAErBC,GAAyB,uCAAG,WAAO5D,GAAP,SAAA6D,EAAA,sDAChCzB,GAAa,GADmB,2CAAH,sDAYzB0B,GAAQnG,YAAO,QAAPA,CAAgB,CAC5BO,QAAS,SAqBX,IAlBkBP,YAAOoG,IAAPpG,EAChB,gBAAGE,EAAH,EAAGA,MAAH,qFAIYA,EAAMC,QAAQ,IAJ1B,iBASsBH,YAAOC,IAAPD,EACtB,gBAAGE,EAAH,EAAGA,MAAH,sDAESA,EAAMC,QAAQ,GAFvB,0BAGUD,EAAMC,QAAQ,GAHxB,UAWEkG,eAHQC,GADZ,GACEC,SACcC,GAFhB,GAEEC,aACqBC,GAHvB,GAGEC,UAAaC,OA4DDC,cAwFd,OACE,qCACE,cAAC,IAAD,UACE,oDAEF,cAAC,IAAD,CAAWxG,SAAS,KAApB,SACE,cAAC,IAAD,CACES,GAAI,CAAEgG,GAAI,QACVC,WAAS,EACTC,UAAU,MACVpG,eAAe,SACfF,WAAW,UACXP,QAAS,EANX,SAQE,cAAC,IAAD,CAAMyC,MAAI,EAACpC,GAAI,GAAf,SA3F6B,uBAAMyG,SAAUT,GAA+BP,IAA/C,UACnC,qDACA,cAAC,IAAD,yBACEnF,GAAI,CAAEoG,MAAO,MAAOC,GAAI,GACxBC,cAA8CC,IAArCX,GAAyBnE,SAAwBmE,GAAyBnE,QAAQC,OAAkBsC,KACzGwB,GAA2B,gBAAiB,CAAEgB,UAAU,KAH9D,IAIEC,KAAK,OACL3B,MAAM,QACN/E,QAAQ,WACRW,MAAK,OAAEgB,QAAF,IAAEA,IAAS,GAChBgF,SAAU,SAACC,GACT/C,EAAS+C,EAAExG,OAAOO,QAEpBkG,gBAAkDL,IAArCX,GAAyBnE,SAAwBmE,GAAyBnE,QAAQC,MAAiB,0DAAuCsC,IAA0B,QAEnL,cAAC,IAAD,yBACEhE,GAAI,CAAEoG,MAAO,MAAOC,GAAI,GACxBC,cAA8CC,IAArCX,GAAyBnE,SAAwBmE,GAAyBnE,QAAQE,aAAwBsC,KAC/GuB,GAA2B,sBAAuB,CAAEgB,UAAU,KAHpE,IAIE1B,MAAM,cACN4B,SAAU,SAACG,GACThD,EAAelC,IAEjBiF,gBAAkDL,IAArCX,GAAyBnE,SAAwBmE,GAAyBnE,QAAQE,YAAuB,0DAAuCsC,IAAsC,KACnMlE,QAAQ,WACR0G,KAAK,OACLK,WAAS,EACTC,KAAM,KAER,cAAC,IAAD,CAAa/G,GAAI,CAAEoG,MAAO,MAAOC,GAAI,GAArC,SACE,cAAC,IAAD,CACEW,mBAAmB,EACnBtG,MAAO4D,GACP2C,WAAYhC,GACZiC,QAASxC,GACTyC,SAAO,EACPT,SAAU,SAACC,GAAQpC,GAAiBoC,QAE1B,uBACd,cAAC,IAAD,CAAaS,UAAU,WAAvB,SACE,eAAC,IAAD,CAAYC,KAAG,EAAC,aAAW,SACzB3G,MAAK,OAAE8D,SAAF,IAAEA,MAAU,GACjB8C,KAAK,0BACLZ,SAAU,SAACC,GACTlC,GAAUkC,EAAExG,OAAOO,QAJvB,UAOE,cAAC,IAAD,CAAkBA,MAAM,SAAS6G,QAAS,cAAC,IAAD,IAAWzC,MAAM,WAC3D,cAAC,IAAD,CAAkBpE,MAAM,OAAO6G,QAAS,cAAC,IAAD,IAAWzC,MAAM,cAG7D,eAAC,IAAD,CAAK9E,GAAI,CAAEP,QAAS,QAAS+H,UAAW,GAAxC,UACE,cAACnC,GAAD,CACEqB,SAAU,YAAmC,IAAfe,EAAc,EAA/BC,cAAiBD,MAE5B1D,GADgB0D,IAIlBE,OAAO,UAAUC,GAAG,eAAeC,UAAQ,EAACpB,KAAK,SACnD,uBAAOqB,QAAQ,eAAf,SACE,cAAC,IAAD,CACEC,UAAW,cAAC,IAAD,IACXhI,QAAQ,YACRqH,UAAU,OAHZ,yBASJ,cAAC,IAAD,CAAKpH,GAAI,CAAEP,QAAS,SAApB,SACE,cAAC,IAAD,CAAQO,GAAI,CAAEqG,GAAI,EAAG2B,GAAI,GAAKjI,QAAQ,YAAYkI,MAAM,UAAUxB,KAAK,SAASyB,QAAS,kBA1I5D,WAE/B,IADA,IAAMC,EAAY,IAAI/G,IACbgH,EAAI,EAAGA,EAAIxG,GAAOyG,OAAQD,IAAK,CACtC,IAAME,EAAQ1G,GAAOwG,GACrBD,EAAUI,OAAV,uBAAiCH,GAAKE,GAExC,IAIIE,EAAkB,CACpBC,IAAKjG,IAAUkG,UACfC,OAAQ,OACR1F,QAPgB,CAChB,OAAU,OAOVZ,KAAM8F,GAGR7F,IAAMsG,QAAQJ,GAAY9F,MAAK,SAAUmG,GACnCA,EAAUxG,KAAKyG,IAAIT,SAAWzG,GAAOyG,QACvCnG,YAAmB,CACjBT,QAAS,CACPE,YAAaoH,OAAOpH,GAAcC,OAAQiH,EAAUxG,KAAKyG,IAAKpH,SAEhEK,eAAgB+B,KACf,SAACkF,EAAW3G,GACTA,EAAKJ,KACP0B,GAAa,GACbN,EAAS4F,IAAOC,MAAMC,aAAaC,MAAO,CAAEC,SAAS,KAErD1F,GAAa,SA6G4E2F,IAA/F,SACG5F,EAAY,cAAC,IAAD,CAAkB6F,MAAO,CAAEtB,MAAO,WAAgB,sBAyBjE,cAAC,IAAD,OAKS9E","file":"static/js/42.42be443d.chunk.js","sourcesContent":["import { Box, Container, Link, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nconst FooterWrapper = styled(Box)(\n  ({ theme }) => `\n        border-radius: 0;\n        margin: ${theme.spacing(3)} 0;\n`\n);\n\nfunction Footer() {\n  return (\n    <FooterWrapper>\n      <Container maxWidth=\"lg\">\n        <Box\n          py={3}\n          display={{ xs: 'block', md: 'flex' }}\n          alignItems=\"center\"\n          textAlign={{ xs: 'center', md: 'left' }}\n          justifyContent=\"space-between\"\n        >\n          <Box>\n            <Typography variant=\"subtitle1\">\n              &copy; 2021 - Tokyo Free White React Admin Dashboard\n            </Typography>\n          </Box>\n          <Typography sx={{ pt: { xs: 2, md: 0 } }} variant=\"subtitle1\">\n            Crafted by <Link href=\"https://bloomui.com\" target=\"_blank\" rel=\"noopener noreferrer\">BloomUI.com</Link>\n          </Typography>\n        </Box>\n      </Container>\n    </FooterWrapper>\n  );\n}\n\nexport default Footer;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)([/*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9.83 8H11v6h2V8h1.17L12 5.83z\",\n  opacity: \".3\"\n}, \"0\"), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 3-7 7h4v6h6v-6h4l-7-7zm1 5v6h-2V8H9.83L12 5.83 14.17 8H13zM5 18h14v2H5z\"\n}, \"1\")], 'UploadTwoTone');\n\nexports.default = _default;","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","import { IBasicID } from \"../Common/types\"\nimport { INotificationInput } from \"./notification.types\";\n\n// create a notification\nexport const AddNotificationBodyTag = \"createNotification\"\n\nexport const AddNotificationBody = (input: INotificationInput) => ({\n  query: `mutation {\n    createNotification(input: {\n      content: {\n        title: \"${input.content.title}\"\n        description: \"${input.content.description}\"\n        images: [${input.content.images.map(item => `\"${item}\"`)}]\n      }\n      targeted_users: [${input.targeted_users.map(item => `\"${item}\"`)}]\n    }) {\n      ...on ValidationError {\n        error_path\n      }\n      ...on INotificationSimple {\n        _id\n        content { title description }\n        targeted_users\n        images\n      }\n    }\n  }`\n})\n\nexport const createNotificationTag = \"createNotification\"\n\nexport const createNotificationBody = ({ content, targeted_users }: INotificationInput) => ({\n  query: `mutation {\n    createNotification(input:{content:{ title:\"${content.title}\", description: \"${content.description}\"}, targeted_users:[${targeted_users}]}) {\n      __typename\n      ... on INotificationSimple{\n      _id content {title description images} targeted_users sender createdAt updatedAt   \n       }\n      ... on ValidationError {\n        error_path errors {\n          error_code error_message\n        }\n      }\n    }\n  }`\n});\n\n// fetch all notifications\nexport const fetchNotificationsDocTag = \"fetchNotificationsDoc\";\n\nexport const fetchNotificationsDoc = () => ({\n  query: `{\n    fetchNotificationsDoc{\n          _id price  minimum_user priority type maximum_user_purchase_amount banned_reason users ActiveUsersCount updatedAt createdAt\n    }\n  }`\n});\n\n// // edit notification\n// export const editGroupTag = \"editGroup\";\n\n// export const editGroupBody = ({ _id, price, priority, minimum_user, maximum_user_purchase_amount, type }: IGroupEdit) => ({\n//   query: `mutation {\n//     editGroup(input:{_id: \"${_id}\", price: \"${price}\", priority: \"${priority}\", minimum_user:  ${minimum_user}, maximum_user_purchase_amount: \"${maximum_user_purchase_amount}\", type: ${type}}) {\n//       __typename\n//       ... on IGroupSimple{\n//           _id price  minimum_user priority type maximum_user_purchase_amount banned_reason users ActiveUsersCount updatedAt createdAt\n//       }\n//       ... on ValidationError {\n//         error_path errors {\n//           error_code error_message\n//         }\n//       }\n//       ... on ValidationErrors {\n//         validation_errors {\n//           error_path errors {\n//             error_message error_code\n//           }\n//         }\n//       }\n//     }\n//   }`\n// });\n\n//remove notification\nexport const removeNotificationTag = \"removeNotificationByID\";\n\nexport const removeNotificationBody = ({ _id }: IBasicID) => ({\n  query: `mutation {\n    removeNotificationByID(_id: \"${_id}\") {\n      __typename\n      ... on INotificationSimple{\n      _id content {title description images} targeted_users sender createdAt updatedAt   \n       }\n      ... on ValidationError {\n        error_path errors {\n          error_code error_message\n        }\n      }\n    }\n  }`\n})\n\n//fetch group\nexport const fetchGroupByIDTag = \"fetchOneGroupByID\";\n\nexport const fetchGroupByIDBody = ({ _id }: IBasicID) => ({\n  query: `{\n    fetchOneGroupByID(_id: \"${_id}\") {\n      __typename\n      ... on IGroupSimple{\n          _id first_name  last_name phone_number email role is_active updatedAt createdAt\n       }\n      ... on ValidationError {\n        error_path errors {\n          error_code error_message\n        }\n      }\n    }\n  }`\n})\n\nexport const FetchNotificationsDocBody = () => ({\n  query: `{\n    fetchNotificationsDoc{\n      _id content {title description images} targeted_users sender{first_name last_name _id phone_number email role is_active} createdAt updatedAt   \n    }\n  }`\n});","import Axios from \"axios\"\nimport endPoints from \"src/constants/endPoints\"\nimport { fetchGroupByIDTag, fetchGroupByIDBody, FetchNotificationsDocBody, removeNotificationBody, removeNotificationTag, createNotificationBody, createNotificationTag, AddNotificationBody, AddNotificationBodyTag } from \"./queries\"\nimport { IBasicID } from \"../Common/types\"\nimport { INotificationInput } from \"./notification.types\";\n\n// create notification\nexport const createNotification = (input: INotificationInput, callback = (err: any, data: any) => null) => {\n  Axios.post(endPoints.baseURL, AddNotificationBody(input))\n    .then(res => {\n      callback(null, res.data.data[AddNotificationBodyTag])\n    })\n    .catch(err => console.log(\"Error\", err))\n}\n\n// export const createNotification = async (input: INotificationInput, callback = (err: any, data: any) => null) => {\n//   // format data for sending data.\n//   console.log('lol', input.content.images)\n//   input.targeted_users = input.targeted_users.map(value => `\"${value}\"`);\n//   for (let i = 0; i < input.content.images.length; ++i) {\n//     formData.append('image', input.content.images[i]);\n//   }\n//   formData.append('description', input.content.description)\n//   formData.append('title', input.content.title)\n//   formData.append('targeted_users', input.targeted_users.toLocaleString())\n//   // send data to server.\n//   try {\n//     const response = await Axios.post(`${endPoints.url}notifications`, formData, {\n//       headers: {\n//         'Content-Type': 'multipart/form-data'\n//       }\n//     });\n//     callback(null, response.data)\n//   } catch (error) {\n//     console.log(error);\n//     callback(error, null)\n//   }\n// }\n// // edit notification\n// export const editGroup = (({ _id, price, priority, minimum_user, maximum_user_purchase_amount, type }: IGroupEdit, callback = (err: any, data: any) => null) => {\n//   Axios.post(endPoints.baseURL, editGroupBody({ _id, price, priority, minimum_user, maximum_user_purchase_amount, type } as IGroupEdit))\n//     .then(res => {\n//       console.log(res.data.data)\n//       callback(null, res.data.data[editGroupTag])\n//     })\n//     .catch(err => console.log(\"Error\", err))\n// })\n\n// remove notification\nexport const removeOneNotification = (({ _id }: IBasicID, callback = (err: any, data: any) => null) => {\n  Axios.post(endPoints.baseURL, removeNotificationBody({ _id }))\n    .then(res => {\n      callback(null, res.data.data[removeNotificationTag])\n    })\n    .catch(err => console.log(\"Error\", err))\n});\n\n// fetch notification by Id\nexport const fectchGroupByID = (({ _id }: IBasicID, callback = (err: any, data: any) => null) => {\n  Axios.post(endPoints.baseURL, fetchGroupByIDBody({ _id }))\n    .then(res => {\n      callback(null, res.data.data[fetchGroupByIDTag])\n    })\n    .catch(err => console.log(\"Error\", err))\n});\n\nexport const FetchNotificationDocTag = \"fetchNotificationsDoc\"\n\nexport const FetchNotificationsDoc = (callback = (err: any, data: any, headers) => null) => {\n  Axios.post(endPoints.baseURL, FetchNotificationsDocBody())\n    .then((res: { data: { data: { [x: string]: any; }; }; }) => {\n      console.log(res.data.data);\n      callback(null, res.data.data[FetchNotificationDocTag], res)\n    })\n    .catch(err => console.log(\"Error\", err))\n};","import Axios from \"axios\"\nimport endPoints from \"src/constants/endPoints\"\nimport { fetchUsersBody, fetchUsersSimpleTag } from \"./query\"\n\n// fetch users\nexport const fetchAllUsersSimple = (callback = (err: any, data: any) => null) => {\n  Axios.post(endPoints.baseURL, fetchUsersBody())\n    .then(res => {\n      console.log(\"data\", res.data.data[fetchUsersSimpleTag])\n      callback(null, res.data.data[fetchUsersSimpleTag])\n    })\n    .catch(err => console.log(\"Error\", err))\n}","// fetch all notifications\nexport const fetchUsersSimpleTag = \"fetchUsers\";\n\nexport const fetchUsersBody = () => ({\n  query: `{\n    fetchUsers {\n        _id\n        first_name\n        middle_name\n        last_name\n        gender\n        role\n        phone_number\n        email\n        service_id\n        phone_number\n    }\n}`\n});","import {\n  Button, CircularProgress, Container, Box, Grid, TextField, Theme, useTheme, CardMedia, Card,\n  RadioGroup, FormControlLabel, Radio\n} from \"@mui/material\";\nimport { styled } from '@mui/material/styles';\nimport { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { INotificationInput } from \"src/store/States/Notification/notification.types\";\nimport { createNotification } from \"src/store/States/Notification/actions\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from \"react-helmet-async\";\nimport Footer from \"src/components/Footer\";\nimport { useNavigate } from \"react-router\";\nimport { ResponseType } from \"src/store/States/Helpers/response.types\";\nimport { fetchAllUsersSimple } from \"src/store/States/User/action\";\nimport { IUserSimple } from \"src/store/States/User/user.types\";\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport Select from 'react-select'\nimport makeAnimated from 'react-select/animated';\nimport Chip from '@mui/material/Chip';\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Actions, selectNewses } from \"src/store/States/News\";\nimport UploadTwoToneIcon from '@mui/icons-material/UploadTwoTone';\nimport routes from 'src/constants/routes'\nimport FormData from 'form-data'\nimport Axios from 'axios'\nimport endPoints from 'src/constants/endPoints'\n\nexport function CreateNotification(_props) {\n  const navigate = useNavigate();\n\n  const [users, setUsers] = useState([])\n  const [isFailed, setIsFailed] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  // fields\n  const [title, setTitle] = useState(null);\n  const [description, setDescription] = useState([]);\n  const [targetedUsers, setTargetedUser] = useState([]);\n  const [images, setImages] = useState([])\n  // fields error\n  const [titleError, setTitleError] = useState(null);\n  const [descriptionError, setDescriptionError] = useState(null);\n  const [targetedUsersError, setTargetedUserError] = useState(null);\n  const [reset, setReset] = useState(false);\n\n  useEffect(() => {\n    fetchAllUsersSimple((_error, data) => {\n      setUsers(data)\n    })\n  }, []);\n\n  const [selectAll, setSelectAll] = useState(false);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [gender, setGender] = useState(null);\n\n  useEffect(() => {\n    let data = userOptions;\n    let isFiltered: boolean = false;\n    if (reset) {\n      data = [];\n      isFiltered = true;\n    }\n    if (selectAll) {\n      setSelectedUsers(data);\n      isFiltered = true;\n    }\n    if (gender === 'male') {\n      data = data.filter(user => user.gender === 'MALE');\n      isFiltered = true;\n    } else if (gender === \"female\") {\n      data = data.filter(user => user.gender === 'FEMALE');\n      isFiltered = true;\n    }\n\n    if (isFiltered) {\n      setSelectedUsers(data);\n    }\n  }, [gender, selectAll, reset]);\n\n  interface IUserOption {\n    readonly value: string;\n    readonly label: string;\n    readonly gender: string;\n  }\n\n  const userOptions: IUserOption[] = users.map(user =>\n  ({\n    value: user._id,\n    label: user.first_name + ' ' + user.last_name,\n    gender: user.gender !== null ? user.gender : null,\n  }));\n\n  const animatedComponents = makeAnimated();\n\n  const createNotificationHandler = async (input: INotificationInput) => {\n    setIsLoading(true)\n    // createNotification(input, (_err: any, data: any) => {\n    //   if (data.success) {\n    //     setIsLoading(false)\n    //     navigate(routes.ADMIN.NOTIFICATION.ROUTE, { replace: true })\n    //   } else {\n    //     setIsLoading(false)\n    //   }\n    // })\n  }\n\n  const Input = styled('input')({\n    display: 'none'\n  });\n\n  const CardCover = styled(Card)(\n    ({ theme }) => `\n    position: relative;\n\n    .MuiCardMedia-root {\n      height: ${theme.spacing(26)};\n    }\n`\n  );\n\n  const CardCoverAction = styled(Box)(\n    ({ theme }) => `\n    position: absolute;\n    right: ${theme.spacing(2)};\n    bottom: ${theme.spacing(2)};\n`\n  );\n\n  const {\n    register: registerCreateNotification,\n    handleSubmit: handleCreateNotificationSubmit,\n    formState: { errors: createNotificationErrors },\n  } = useForm<INotificationInput>();\n\n  const createNotificationHandle = () => {\n    const _formData = new FormData()\n    for (let i = 0; i < images.length; i++) {\n      const image = images[i];\n      _formData.append(`notification:${i}`, image)\n    }\n    let headersList = {\n      \"Accept\": \"*/*\",\n    }\n\n    let reqOptions: any = {\n      url: endPoints.uploadURL,\n      method: \"POST\",\n      headers: headersList,\n      data: _formData,\n    }\n\n    Axios.request(reqOptions).then(function (_response) {\n      if (_response.data.uri.length === images.length) {\n        createNotification({\n          content: {\n            description: String(description), images: _response.data.uri, title\n          },\n          targeted_users: targetedUsers\n        }, (_err: any, data: any) => {\n          if (data._id) {\n            setIsLoading(false)\n            navigate(routes.ADMIN.NOTIFICATION.ROUTE, { replace: true })\n          } else {\n            setIsLoading(false)\n          }\n        })\n      }\n    })\n  }\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  function getStyles(name: string, personName: readonly string[], theme: Theme) {\n    return {\n      fontWeight:\n        personName.indexOf(name) === -1\n          ? theme.typography.fontWeightRegular\n          : theme.typography.fontWeightMedium,\n    };\n  }\n\n\n  const theme = useTheme();\n\n  const handleGenderSelectionChange = (event: SelectChangeEvent<typeof targetedUsers>) => {\n    const {\n      target: { value },\n    } = event;\n    setTargetedUser(\n      // On autofill we get a the stringified value.\n      typeof value === 'string' ? value.split(',') : value,\n    );\n  };\n  const createNotificationForm = () => <form onSubmit={handleCreateNotificationSubmit(createNotificationHandler)}>\n    <h1>Create Notification</h1>\n    <TextField\n      sx={{ width: \"60%\", mt: 4 }}\n      error={((createNotificationErrors.content !== undefined ? createNotificationErrors.content.title : false) || titleError) ? true : false}\n      {...registerCreateNotification(\"content.title\", { required: true })}\n      type=\"text\"\n      label=\"title\"\n      variant=\"outlined\"\n      value={title ?? \"\"}\n      onChange={(e) => {\n        setTitle(e.target.value)\n      }}\n      helperText={(createNotificationErrors.content !== undefined ? createNotificationErrors.content.title : false) ? <span>This field is required</span> : (titleError ? titleError : null)}\n    />\n    <TextField\n      sx={{ width: \"60%\", mt: 4 }}\n      error={((createNotificationErrors.content !== undefined ? createNotificationErrors.content.description : false) || descriptionError) ? true : false}\n      {...registerCreateNotification(\"content.description\", { required: true })}\n      label=\"description\"\n      onChange={(_e) => {\n        setDescription(description)\n      }}\n      helperText={(createNotificationErrors.content !== undefined ? createNotificationErrors.content.description : false) ? <span>This field is required</span> : (descriptionError ? descriptionError : null)}\n      variant=\"outlined\"\n      type=\"text\"\n      multiline\n      rows={4}\n    />\n    <FormControl sx={{ width: \"60%\", mt: 4 }}>\n      <Select\n        closeMenuOnSelect={false}\n        value={selectedUsers}\n        components={animatedComponents}\n        options={userOptions}\n        isMulti\n        onChange={(e) => { setSelectedUsers(e) }}\n      />\n    </FormControl><br />\n    <FormControl component=\"fieldset\">\n      <RadioGroup row aria-label=\"gender\"\n        value={gender ?? \"\"}\n        name=\"row-radio-buttons-group\"\n        onChange={(e) => {\n          setGender(e.target.value);\n        }}\n      >\n        <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\n        <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n      </RadioGroup>\n    </FormControl>\n    <Box sx={{ display: 'block', marginTop: 4 }}>\n      <Input\n        onChange={({ currentTarget: { files } }) => {\n          const payload = files as unknown as any[]\n          setImages(payload)\n        }}\n        // {...registerCreateNotification(\"content.images\", { required: true })}\n        accept=\"image/*\" id=\"change-cover\" multiple type=\"file\" />\n      <label htmlFor=\"change-cover\">\n        <Button\n          startIcon={<UploadTwoToneIcon />}\n          variant=\"contained\"\n          component=\"span\"\n        >\n          Images\n        </Button>\n      </label>\n    </Box>\n    <Box sx={{ display: 'block' }}>\n      <Button sx={{ mt: 4, px: 5 }} variant=\"contained\" color=\"primary\" type=\"button\" onClick={() => createNotificationHandle()}>\n        {isLoading ? <CircularProgress style={{ color: \"white\" }} /> : \"Create\"}\n      </Button>\n    </Box>\n  </form>\n\n\n  return (\n    <>\n      <Helmet>\n        <title>Ethio Lottery</title>\n      </Helmet>\n      <Container maxWidth=\"lg\">\n        <Grid\n          sx={{ mx: \"auto\" }}\n          container\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"stretch\"\n          spacing={3}\n        >\n          <Grid item xs={12}>\n            {createNotificationForm()}\n          </Grid>\n        </Grid>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default CreateNotification;"],"sourceRoot":""}